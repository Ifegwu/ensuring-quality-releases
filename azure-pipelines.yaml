name: Azure Pipelines

trigger: 
  - main
variables:
  python.version: "3.7.6"
  
  # web app name
  webAppName: 'saasapp-type-AppService'

  # VM image Agent name
  vmImageName: 'ubuntu-latest'

  # Service Connection Name
  serviceConnectionName: 'Azure subscription 1(3ca2aacf-c15c-4375-a828-0d64713c2e00)'

  # Environment name
  environmentName: 'Test'


stages:
- stage: Provision
  jobs:
  - job: TerraformTasks
    displayName: Terraform Tasks
    pool:
      vmImage: $(vmImageName)
    steps:
   # Needed for Terraform VM deployment
   # Install SSH Key for VM
   
    - task: InstallSSHKey@0
      displayName: Install SSH key
      inputs:
        knownHostsEntry: $(hostEntry)
        sshPublicKey: '$(myPubKey)'
        sshKeySecureFile: 'id_rsa'

    - task: TerraformCLI@0
      displayName: Terraform Init
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendType: 'azurerm'
        backendServiceArm: '$(serviceConnectionName)'
        backendAzureRmResourceGroupName: 'qrdevopsRG'
        backendAzureRmStorageAccountName: 'tstate8969'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        allowTelemetryCollection: true
    
    - task: TerraformCLI@0
      displayName: 'Terraform Plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: '$(serviceConnectionName)'
        commandOptions: '-lock=false -refresh=false'
        allowTelemetryCollection: true
       
    - task: TerraformCLI@0
      displayName: Terraform Apply
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: '$(serviceConnectionName)'
        commandOptions: '-lock=false'
        allowTelemetryCollection: true

              
- stage: Build
  jobs:
  - job: build_artifacts
    displayName: BuildArtifacts
    pool: 
      vmImage: $(vmImageName)
    steps:    
    - task: ArchiveFiles@2
      displayName: ArchiveFakeRestAPI
      inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"

    - task: PublishPipelineArtifact@1
      displayName: Publish Fakerestapi as Artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        artifactName: 'drop-fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium Artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'
  
- stage: Deploy
  jobs:
  - deployment: deploy_fakeRestAPI
    displayName: DeployFakeRestAPI
    pool: 
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
            steps:
              - task: AzureWebApp@1
                displayName: "DeployAzureWebApp"
                inputs:
                  azureSubscription: $(serviceConnectionName)
                  appName: $(webAppName)
                  appType: 'webAppLinux'
                  package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
                  deploymentMethod: 'auto'
  - deployment: VMDeploy
    displayName: Deploy Virtual Machine
    environment:
      name:  $(environmentName)
      resourceName: saasapp-type-1-VM
      resourceType: 'VirtualMachine'
      tags: 'demo' 
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                sudo apt-get upgrade -y
                sudo apt install software-properties-common -y
                sudo apt-add-repository ppa:universe -y
                sudo apt-get update
                sudo apt-get install python3-pip -y
                sudo python3 -m pip install --upgrade pip
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                pip3 install selenium
            displayName: Configure VM
- stage: Test
  jobs:
  - job: IntegrationTests   
    displayName: Integration Tests
    pool: 
      vmImage: $(vmImageName)
      steps:
      - task: NodeTool@0
        displayName: Install Node v16.x
        inputs:
          versionSpec: '16.x'
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: |
            sudo npm install -g newman
            workingDirectory: '$(System.DefaultWorkDirectory)'
      - task: CmdLine@2
        displayName: Regrassion tests
        inputs:
          script: |
            newman run automatedtesting/postman/RegressionTests.postman_collection.json \
              --reporters cli,junit \
              --reporter-junit-export log/newman/newman.RegressionTests.xml
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      - task: CmdLine@2
        displayName: Validation tests
        inputs:
          script: |
            newman run automatedtesting/postman/ValidationTests.postman_collection.json \
              --reporters cli,junit \
              --reporter-junit-export log/newman/newman.ValidationTest.xml
              ls -la $(System.DefaultWorkingDirectory)/log/newman/
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
              
      - task: PublishPipelineArtifact@1
        displayName: Publish Newman logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
          
      - task: PublishTestResults@2
        displayName: Publish Newman test results
        inputs:
            testResultsFiles: '*.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)/log/newman'
            mergeTestResults: true
            publishRunAttachments: true
            testRunTitle: 'PublisNewmanTestResults'
  - job: UITests
    displayName: Selenium UI Tests
    steps:
    - task: Bash@3
      displayName: 'Setup VM environment'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          sudo apt-get upgrade -y
          sudo apt-get install python3-pip -
          sudo apt-get install unzip -y
    - task: Bash@3
      displayName: 'Configure Selenium, Chromium & chromedriver'
      inputs:
        targetType: 'inline'
        script: |
          #chromium & Selenium installation
          sudo apt-get install -y chromium-browser
          pip3 install selenium

          #install chromedriver & export path
          if [ ! -f $(Pipeline.Workspace)/chromedriver ]; then
                wget https://chromedriver.storage.googleapis.com/100.0.4896.20/chromedriver_linux64.zip
                unzip chromedriver_linux64.zip
          fi
          export PATH=$PATH:$(Pipeline.Workspace)/chromedriver
    - task: Bash@3
      displayName: 'Run UI test'
      inputs:
        targetType: 'inline'
        script: |
            if [! -d /var/log/selenium ]; then
                  sudo mkdir /var/log/selenium
                    sudo chmod 777 /var/log/selenium
                fi
                python ./automatedtesting/selenium/login.py | sudo tee -a /var/log/selenium-tes.log
                cd $(System.DefaultWorkingDirectory)
                mkdir -p log/selenium 
                sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log  
    - task: PublishBuildArtifacts@1
      displayName: Publish selenium logs
      inputs:
        TargetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
        ArtifactName: 'drop-selenium-logs'

  - job: perfomance_tests
    displayName: 'PerfomanceTests'
    pool: 
      vmImage: $(vmImageName)
      steps:
          - bash: |
              sudo apt-get install openjdk-11-jre-headless -y
              java --version
              wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.tgz -O jmeter.tgz
              tar xzvf jmeter.tgz
              apache-jmeter-5.2/bin/jmeter --version
              mkdir -p log/jmeter
            displayName: 'Install JMeter'
          - bash: |
              apache-jmeter-5.2/bin/jmeter -n -t automatedtesting/jmeter/stress-test.jmx \
                                    -l log/jmeter/stress-test-result.jtl \
                                    -e -f -o log/jmeter/stress-test-html-report \
                                    -j log/jmeter/jmeter-stress-test.log
              cat log/jmeter/jmeter-stress-test.log
            displayName: 'JMeter Stress Test'
          - bash: |
              apache-jmeter-5.2/bin/jmeter -n -t automatedtesting/jmeter/endurance-test.jmx \
                                          -l log/jmeter/endurance-test-result.csv \
                                          -e -f -o log/jmeter/endurance-test-html-report \
                                          -j log/jmeter/jmeter-endurance-test.log
              cat log/jmeter/jmeter-endurance-test.log                             
            displayName: 'Endurance Test'
          # - bash: |
          #     rm -rf log/jmeter/stress-test-html-report
          #     rm -rf log/jmeter/endurance-test-html-report
          #     cd log/jmeter/
          #   displayName: Delete initial JMeter HTML test reports
          - task: ArchiveFiles@2
            displayName: Saving JMeter ...
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter-$(Build.BuildId).zip'
              verbose: true
          - task: PublishPipelineArtifact@1
            displayName: 'Publish logs from JMeter tests'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
              artifactName: 'jmeter-logs-atf'
